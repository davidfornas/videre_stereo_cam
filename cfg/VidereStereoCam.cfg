#! /usr/bin/env python
#*
#*  Copyright (c) 2010, Antons Rebguns
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Videre Stereo Cameras parameters dynamic configuration

PACKAGE = "videre_stereo_cam"

#import roslib
#roslib.load_manifest('videre_stereo_cam')

from dynamic_reconfigure.parameter_generator_catkin import *
from driver_base.msg import SensorLevels

gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max

videre_mode = gen.enum([gen.const("PROC_MODE_NONE",          str_t, "none",          "Left raw + Right raw"),
                        gen.const("PROC_MODE_RECTIFIED",     str_t, "rectified",     "Left rectified + Right rectified"),
                        gen.const("PROC_MODE_DISPARITY_RAW", str_t, "disparity_raw", "Left raw + Disprity"),
                        gen.const("PROC_MODE_DISPARITY",     str_t, "disparity",     "Left rectified + Disparity"),
                        gen.const("PROC_MODE_TEST",          str_t, "test",          "Test image")],
                        "Amount of processing done on camera if STOC.")

gen.add("videre_mode",       str_t,  SensorLevels.RECONFIGURE_STOP, "Amount of processing done on camera if STOC", "none", edit_method = videre_mode)
gen.add("convert_to_color",  bool_t, SensorLevels.RECONFIGURE_STOP, "Calculate color from Bayer pattern", False)

gen.add("brightness_auto", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Auto adjust brightness", True)
gen.add("brightness",      int_t,  SensorLevels.RECONFIGURE_RUNNING, "Brightness level if not auto", 50, 0, 255)

gen.add("exposure_auto", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Auto adjust exposure", True)
gen.add("exposure",      int_t,  SensorLevels.RECONFIGURE_RUNNING, "Exposure level if not auto", 0, 0, 529)

gen.add("gain_auto", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Auto adjust gain", True)
gen.add("gain",      int_t,  SensorLevels.RECONFIGURE_RUNNING, "Gain level if not auto", 0, 0, 48)

gen.add("whitebalance_auto", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Auto adjust whitebalance", True)
gen.add("whitebalance_blue", int_t,  SensorLevels.RECONFIGURE_RUNNING, "Blue/U level if not auto", 15, 0, 30)
gen.add("whitebalance_red",  int_t,  SensorLevels.RECONFIGURE_RUNNING, "Red/V level if not auto",  15, 0, 30)

gen.add("companding", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Bring up low light levels", True)
gen.add("hdr",        bool_t, SensorLevels.RECONFIGURE_RUNNING, "High dynamic range", False)
gen.add("frame_id",   str_t,  SensorLevels.RECONFIGURE_RUNNING, "The optical camera TF frame set in message headers", "stereo_optical_frame")

gen.add("uniqueness_threshold", int_t, SensorLevels.RECONFIGURE_RUNNING, "Filter out if best match does not sufficiently exceed the next-best match", 36, 0, 189)
gen.add("texture_threshold",    int_t, SensorLevels.RECONFIGURE_RUNNING, "Filter out if SAD window response does not exceed texture threshold", 30, 0, 189)
gen.add("speckle_size",         int_t, SensorLevels.RECONFIGURE_RUNNING, "Reject regions smaller than this size, pixels", 100, 0, 1000)
gen.add("speckle_range",        int_t, SensorLevels.RECONFIGURE_RUNNING, "Max allowed difference between detected disparities", 10, 0, 31)
gen.add("horopter",             int_t, SensorLevels.RECONFIGURE_RUNNING, "Change horopter", 0, 0, 63)

exit(gen.generate('videre_stereo_cam', "videre_stereo_cam", "VidereStereoCam"))
